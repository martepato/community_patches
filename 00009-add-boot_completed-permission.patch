--- a/frameworks/base/core/java/android/app/AppOpsManager.java
+++ b/frameworks/base/core/java/android/app/AppOpsManager.java
 
@@ -353,7 +353,9 @@
     /** @hide */
     public static final int OP_BLUETOOTH_SCAN = 77;
     /** @hide */
-    public static final int _NUM_OP = 78;
+    public static final int OP_BOOT_COMPLETED = 78;
+    /** @hide */
+    public static final int _NUM_OP = 79;

     /** Access to coarse location information. */
     public static final String OPSTR_COARSE_LOCATION = "android:coarse_location";
@@ -467,6 +469,9 @@
     /** Answer incoming phone calls */
     public static final String OPSTR_ANSWER_PHONE_CALLS
             = "android:answer_phone_calls";
+    /** Required for start at boot **/
+    private static final String OPSTR_BOOT_COMPLETED =
+            "android:boot_completed";
     /**
      * Accept call handover
      * @hide
@@ -735,6 +740,7 @@
             OP_MANAGE_IPSEC_TUNNELS,            // MANAGE_IPSEC_HANDOVERS
             OP_START_FOREGROUND,                // START_FOREGROUND
             OP_COARSE_LOCATION,                 // BLUETOOTH_SCAN
+            OP_BOOT_COMPLETED,                  // BOOT_COMPLETED
     };

     /**
@@ -819,6 +825,7 @@
             OPSTR_MANAGE_IPSEC_TUNNELS,
             OPSTR_START_FOREGROUND,
             OPSTR_BLUETOOTH_SCAN,
+            OPSTR_BOOT_COMPLETED,
     };

     /**
@@ -904,6 +911,7 @@
             "MANAGE_IPSEC_TUNNELS",
             "START_FOREGROUND",
             "BLUETOOTH_SCAN",
+            "BOOT_COMPLETED",
     };

     /**
@@ -988,7 +996,8 @@
             Manifest.permission.ACCEPT_HANDOVER,
             null, // no permission for OP_MANAGE_IPSEC_TUNNELS
             Manifest.permission.FOREGROUND_SERVICE,
-            null, // no permission for OP_BLUETOOTH_SCAN
+            null, // no permission for OP_BLUETOOTH_SCAN,
+            Manifest.permission.RECEIVE_BOOT_COMPLETED
     };

     /**
@@ -1075,6 +1084,7 @@
             null, // MANAGE_IPSEC_TUNNELS
             null, // START_FOREGROUND
             null, // maybe should be UserManager.DISALLOW_SHARE_LOCATION, //BLUETOOTH_SCAN
+            null, //BOOT_COMPLETED
     };

     /**
@@ -1160,6 +1170,7 @@
             false, // MANAGE_IPSEC_HANDOVERS
             false, // START_FOREGROUND
             true, // BLUETOOTH_SCAN
+            false, // BOOT_COMPLETED
     };

     /**
@@ -1244,6 +1255,7 @@
             AppOpsManager.MODE_ERRORED,  // MANAGE_IPSEC_TUNNELS
             AppOpsManager.MODE_ALLOWED,  // OP_START_FOREGROUND
             AppOpsManager.MODE_ALLOWED,  // OP_BLUETOOTH_SCAN
+            AppOpsManager.MODE_ALLOWED, // OP_BOOT_COMPLETED
     };

     /**
@@ -1332,6 +1344,7 @@
             false, // MANAGE_IPSEC_TUNNELS
             false, // START_FOREGROUND
             false, // BLUETOOTH_SCAN
+            false, // OP_BOOT_COMPLETED
     };

     /**
     
--- a/frameworks/base/services/core/java/com/android/server/am/UserController.java
+++ b/frameworks/base/services/core/java/com/android/server/am/UserController.java
@@ -357,7 +357,7 @@
                     | Intent.FLAG_RECEIVER_INCLUDE_BACKGROUND);
             mInjector.broadcastIntent(intent, null, resultTo, 0, null, null,
                     new String[]{android.Manifest.permission.RECEIVE_BOOT_COMPLETED},
-                    AppOpsManager.OP_NONE, null, true, false, MY_PID, SYSTEM_UID, userId);
+                    AppOpsManager.OP_BOOT_COMPLETED, null, true, false, MY_PID, SYSTEM_UID, userId);
         }

         // We need to delay unlocking managed profiles until the parent user
@@ -557,7 +557,7 @@
                     }
                 }, 0, null, null,
                 new String[]{android.Manifest.permission.RECEIVE_BOOT_COMPLETED},
-                AppOpsManager.OP_NONE, null, true, false, MY_PID, SYSTEM_UID, userId);
+                AppOpsManager.OP_BOOT_COMPLETED, null, true, false, MY_PID, SYSTEM_UID, userId);
     }

     int restartUser(final int userId, final boolean foreground) {
